#+TITLE: Kishan's Qtile config
#+AUTHOR: kishancjx (CodingAnna)
#+PROPERTY: header-args :tangle config.py
#+auto_tangle: t
#+STARTUP: showeverything


* Table of contents :toc:
- [[#imports-of-libraries][Imports of Libraries]]
- [[#variables-of-the-program][Variables of the Program]]
- [[#hooks-and-functions][Hooks and Functions]]
- [[#all-keybindings][All Keybindings]]
- [[#groups-workspaces][Groups (Workspaces)]]
- [[#layouts][Layouts]]
- [[#top-bar-and-its-widgets][Top Bar and Its WIDGETS]]
- [[#floating-windows-and-other-stuff][Floating Windows and Other Stuff]]
- [[#the-whole-config][The whole config]]

* Imports of Libraries

#+begin_src python

  from libqtile import bar, layout, widget,hook
  from libqtile.config import Click, Drag, Group, Key, Match, Screen
  from libqtile.lazy import lazy
  import subprocess,os,re,socket,powerline
  from libqtile.utils import guess_terminal
  

#+end_src

* Variables of the Program

#+begin_src python

  mod = "mod4" #This will setup windows key as my mod key
 
  terminal= guess_terminal() #This will automatically try to guess the terminal

#+end_src

* Hooks and Functions
#+begin_src python
  
   @hook.subscribe.startup
  def autostart():
      # subprocess.run([os.path.expanduser("~/.config/qtile/autostart.fish")])
      subprocess.call(["/usr/bin/fish", "-c", os.path.expanduser("~/.config/qtile/autostart.fish")])


#+end_src

* All Keybindings

#+begin_src python

  keys = [
      # A list of available commands that can be bound to keys can be found
      # at https://docs.qtile.org/en/latest/manual/config/lazy.html

      # Switch between windows
      Key([mod], "h", lazy.layout.left(), desc="Move focus to left"),
      Key([mod], "l", lazy.layout.right(), desc="Move focus to right"),
      Key([mod], "j", lazy.layout.down(), desc="Move focus down"),
      Key([mod], "k", lazy.layout.up(), desc="Move focus up"),
      Key([mod], "space", lazy.layout.next(), desc="Move window focus to other window"),
      # Move windows between left/right columns or move up/down in current stack.
      # Moving out of range in Columns layout will create new column.
      Key([mod, "shift"], "h", lazy.layout.shuffle_left(), desc="Move window to the left"),
      Key([mod, "shift"], "l", lazy.layout.shuffle_right(), desc="Move window to the right"),
      Key([mod, "shift"], "j", lazy.layout.shuffle_down(), desc="Move window down"),
      Key([mod, "shift"], "k", lazy.layout.shuffle_up(), desc="Move window up"),
      # Grow windows. If current window is on the edge of screen and direction
      # will be to screen edge - window would shrink.
      Key([mod, "control"], "h", lazy.layout.grow_left(), desc="Grow window to the left"),
      Key([mod, "control"], "l", lazy.layout.grow_right(), desc="Grow window to the right"),
      Key([mod, "control"], "j", lazy.layout.grow_down(), desc="Grow window down"),
      Key([mod, "control"], "k", lazy.layout.grow_up(), desc="Grow window up"),
      Key([mod], "n", lazy.layout.normalize(), desc="Reset all window sizes"),

      #kills any window
      Key([mod], "q", lazy.window.kill(), desc="Kill focused window"),
      # Toggle between different layouts as defined below
      Key([mod], "Tab", lazy.next_layout(), desc="Toggle between layouts"),
      Key(
          [mod],
          "f",
          lazy.window.toggle_fullscreen(),
          desc="Toggle fullscreen on the focused window",
      ),
      Key([mod], "t", lazy.window.toggle_floating(), desc="Toggle floating on the focused window"),
      Key([mod, "control"], "r", lazy.reload_config(), desc="Reload the config"),
      Key([mod, "control"], "q", lazy.shutdown(), desc="Shutdown Qtile"),
      Key([mod], "r", lazy.spawncmd(), desc="Spawn a command using a prompt widget"),




      ## Launching Stuffs
      Key(["mod1"], "space", lazy.spawn("rofi -show drun"),desc="Launch Rofi"),
      Key(["mod1","shift"],"v",lazy.spawn("xfce4-popup-clipman"),desc="open clip man for clipboard history"),
      Key([mod], "Return", lazy.spawn(terminal), desc="Launch terminal"),
      Key([mod],"print",lazy.spawn("flameshot gui"),desc="Lauches Flameshot"),


  ]
#+end_src

* Groups (Workspaces)

#+begin_src python

  groups = [Group(i) for i in "1234567890"]

  for i in groups:
      keys.extend(
          [
             # mod1 + letter of group = switch to group
             Key(
                 [mod],
                 i.name,
                 lazy.group[i.name].toscreen(),
                   desc="Switch to group {}".format(i.name),
              ),
          # mod1 + shift + letter of group = switch to & move focused window to group
               Key(
                  [mod, "shift"],
                   i.name,
                  lazy.window.togroup(i.name, switch_group=True),
                  desc="Switch to & move focused window to group {}".format(i.name),
              ),
          
           ]
      )

#+end_src

* Layouts

#+begin_src python
      layouts = [
          # layout.Columns(border_focus_stack=["#d75f5f", "#8f3d3d"], border_width=4),
         # layout.Max(),
        # Try more layouts by unleashing below layouts.
         # layout.Stack(num_stacks=2),
         layout.Bsp( border_width=4,        # Set the border width in pixels
      border_focus="#f40000",  # Set the border color for the focused window
      border_normal="#c74a4a", # Set the border color for other windows
      border_on_single=True ,
          margin=8),
       # layout.Matrix(),
       #  layout.MonadTall(
     #        border_width=4,        # Set the border width in pixels
      # border_focus="#f40000",  # Set the border color for the focused window
     #  border_normal="#c74a4a" # Set the border color for other windows
            #  ,
          #margin=8

         #   ),
        # layout.MonadWide(),
        # layout.RatioTile(),
       #  layout.Tile(),
       #  layout.TreeTab(),
       #  layout.VerticalTile(),
       #  layout.Zoomy(),
    ]
#+end_src

* Top Bar and Its WIDGETS

#+begin_src python

        widget_defaults = dict(
           font="FiraCode",
       #font="TerminessTTF Nerd Font",
           fontsize=12,
           padding=2,
       )
       extension_defaults = widget_defaults.copy()



       screens = [
           Screen(
               top=bar.Bar(
                   [
                       widget.Image(filename="/home/kishancjx/.config/qtile/images/fire.svg",),
                    # widget.CurrentLayout(),

                     widget.GroupBox(

                       highlight_method="line",block_highlight_text_color="#ff0000",
                       highlight_color=['#000000', '#000000'],active="#504960" , inactive="#292624", background="",disable_drag=True,this_current_screen_border="#f40000",rounded=True
  ),

    #powerline.right_arrow("#f40000","#ffffff"),
    CurrentLayout(background="#ff0000"),
   # powerline.left_arrow("#f40000","#ffffff"),


                       widget.Prompt(),
                       widget.WindowName(),
                       widget.Chord(
                           chords_colors={
                               "launch": ("#ff0000", "#ffffff"),
                           },
                           name_transform=lambda name: name.upper(),
                       ),
                       # widget.TextBox("default config", name="default"),
                       # widget.TextBox("Press &lt;M-r&gt; to spawn", foreground="#d75f5f"),
                       # NB Systray is incompatible with Wayland, consider using StatusNotifier instead
                       # widget.StatusNotifier(),
                       widget.Systray(),
                       widget.Clock(format="%d-%m-%Y %a %I:%M %p"),
                       widget.QuickExit(),
                   ],
                   24,
               ),




           ),
       ]
#+end_src

* Floating Windows and Other Stuff

#+begin_src python
   # Drag floating layouts.
  mouse = [
      Drag([mod], "Button1", lazy.window.set_position_floating(), start=lazy.window.get_position()),
      Drag([mod], "Button3", lazy.window.set_size_floating(), start=lazy.window.get_size()),
      Click([mod], "Button2", lazy.window.bring_to_front()),
  ]

  dgroups_key_binder = None
  dgroups_app_rules = []  # type: list
  follow_mouse_focus = True
  bring_front_click = False
  floats_kept_above = True
  cursor_warp = False
  floating_layout = layout.Floating(border_width=3,border_normal="#c74a4a" ,border_focus="#f40000",
      float_rules=[
          # Run the utility of `xprop` to see the wm class and name of an X client.
          ,*layout.Floating.default_float_rules,
          Match(wm_class="confirmreset"),  # gitk
          Match(wm_class="makebranch"),  # gitk
          Match(wm_class="maketag"),  # gitk
          Match(wm_class="ssh-askpass"),  # ssh-askpass
          Match(title="branchdialog"),  # gitk
          Match(title="pinentry"),  # GPG key password entry
      ]
  )
  auto_fullscreen = True
  focus_on_window_activation = "smart"
  reconfigure_screens = True

  # If things like steam games want to auto-minimize themselves when losing
  # focus, should we respect this or not?
  auto_minimize = True

  # When using the Wayland backend, this can be used to configure input devices.
  wl_input_rules = None

  wmname = "xzaack"
#+end_src



* The whole config

#+begin_src python







 

 




  #my stuff
  #autostarting background servicess

 


  # #import arcobattery

  # #mod4 or mod = super key
  # mod = "mod4"
  # mod1 = "alt"
  # mod2 = "control"
  # home = os.path.expanduser('~')


  # @lazy.function
  # def window_to_prev_group(qtile):
  #     if qtile.currentWindow is not None:
  #         i = qtile.groups.index(qtile.currentGroup)
  #         qtile.currentWindow.togroup(qtile.groups[i - 1].name)

  # @lazy.function
  # def window_to_next_group(qtile):
  #     if qtile.currentWindow is not None:
  #         i = qtile.groups.index(qtile.currentGroup)
  #         qtile.currentWindow.togroup(qtile.groups[i + 1].name)

  # keys = [

  # # Most of our keybindings are in sxhkd file - except these

  # # SUPER + FUNCTION KEYS

  #     Key([mod], "f", lazy.window.toggle_fullscreen()),
  #     Key([mod], "q", lazy.window.kill()),


  # # SUPER + SHIFT KEYS

  #     Key([mod, "shift"], "q", lazy.window.kill()),
  #     Key([mod, "shift"], "r", lazy.restart()),


  # # QTILE LAYOUT KEYS
  #     Key([mod], "n", lazy.layout.normalize()),
  #     Key([mod], "space", lazy.next_layout()),

  # # CHANGE FOCUS
  #     Key([mod], "Up", lazy.layout.up()),
  #     Key([mod], "Down", lazy.layout.down()),
  #     Key([mod], "Left", lazy.layout.left()),
  #     Key([mod], "Right", lazy.layout.right()),
  #     Key([mod], "k", lazy.layout.up()),
  #     Key([mod], "j", lazy.layout.down()),
  #     Key([mod], "h", lazy.layout.left()),
  #     Key([mod], "l", lazy.layout.right()),


  # # RESIZE UP, DOWN, LEFT, RIGHT
  #     Key([mod, "control"], "l",
  #         lazy.layout.grow_right(),
  #         lazy.layout.grow(),
  #         lazy.layout.increase_ratio(),
  #         lazy.layout.delete(),
  #         ),
  #     Key([mod, "control"], "Right",
  #         lazy.layout.grow_right(),
  #         lazy.layout.grow(),
  #         lazy.layout.increase_ratio(),
  #         lazy.layout.delete(),
  #         ),
  #     Key([mod, "control"], "h",
  #         lazy.layout.grow_left(),
  #         lazy.layout.shrink(),
  #         lazy.layout.decrease_ratio(),
  #         lazy.layout.add(),
  #         ),
  #     Key([mod, "control"], "Left",
  #         lazy.layout.grow_left(),
  #         lazy.layout.shrink(),
  #         lazy.layout.decrease_ratio(),
  #         lazy.layout.add(),
  #         ),
  #     Key([mod, "control"], "k",
  #         lazy.layout.grow_up(),
  #         lazy.layout.grow(),
  #         lazy.layout.decrease_nmaster(),
  #         ),
  #     Key([mod, "control"], "Up",
  #         lazy.layout.grow_up(),
  #         lazy.layout.grow(),
  #         lazy.layout.decrease_nmaster(),
  #         ),
  #     Key([mod, "control"], "j",
  #         lazy.layout.grow_down(),
  #         lazy.layout.shrink(),
  #         lazy.layout.increase_nmaster(),
  #         ),
  #     Key([mod, "control"], "Down",
  #         lazy.layout.grow_down(),
  #         lazy.layout.shrink(),
  #         lazy.layout.increase_nmaster(),
  #         ),


  # # FLIP LAYOUT FOR MONADTALL/MONADWIDE
  #     Key([mod, "shift"], "f", lazy.layout.flip()),

  # # FLIP LAYOUT FOR BSP
  #     Key([mod, "mod1"], "k", lazy.layout.flip_up()),
  #     Key([mod, "mod1"], "j", lazy.layout.flip_down()),
  #     Key([mod, "mod1"], "l", lazy.layout.flip_right()),
  #     Key([mod, "mod1"], "h", lazy.layout.flip_left()),

  # # MOVE WINDOWS UP OR DOWN BSP LAYOUT
  #     Key([mod, "shift"], "k", lazy.layout.shuffle_up()),
  #     Key([mod, "shift"], "j", lazy.layout.shuffle_down()),
  #     Key([mod, "shift"], "h", lazy.layout.shuffle_left()),
  #     Key([mod, "shift"], "l", lazy.layout.shuffle_right()),

  # # MOVE WINDOWS UP OR DOWN MONADTALL/MONADWIDE LAYOUT
  #     Key([mod, "shift"], "Up", lazy.layout.shuffle_up()),
  #     Key([mod, "shift"], "Down", lazy.layout.shuffle_down()),
  #     Key([mod, "shift"], "Left", lazy.layout.swap_left()),
  #     Key([mod, "shift"], "Right", lazy.layout.swap_right()),

  # # TOGGLE FLOATING LAYOUT
  #     Key([mod, "shift"], "space", lazy.window.toggle_floating()),

  #     ]

  # def window_to_previous_screen(qtile, switch_group=False, switch_screen=False):
  #     i = qtile.screens.index(qtile.current_screen)
  #     if i != 0:
  #         group = qtile.screens[i - 1].group.name
  #         qtile.current_window.togroup(group, switch_group=switch_group)
  #         if switch_screen == True:
  #             qtile.cmd_to_screen(i - 1)

  # def window_to_next_screen(qtile, switch_group=False, switch_screen=False):
  #     i = qtile.screens.index(qtile.current_screen)
  #     if i + 1 != len(qtile.screens):
  #         group = qtile.screens[i + 1].group.name
  #         qtile.current_window.togroup(group, switch_group=switch_group)
  #         if switch_screen == True:
  #             qtile.cmd_to_screen(i + 1)

  # keys.extend([
  #     # MOVE WINDOW TO NEXT SCREEN
  #     Key([mod,"shift"], "Right", lazy.function(window_to_next_screen, switch_screen=True)),
  #     Key([mod,"shift"], "Left", lazy.function(window_to_previous_screen, switch_screen=True)),
  # ])

  # groups = []

  # # FOR QWERTY KEYBOARDS
  # group_names = ["1", "2", "3", "4", "5", "6", "7", "8", "9", "0",]

  # # FOR AZERTY KEYBOARDS
  # #group_names = ["ampersand", "eacute", "quotedbl", "apostrophe", "parenleft", "section", "egrave", "exclam", "ccedilla", "agrave",]

  # #group_labels = ["1 ", "2 ", "3 ", "4 ", "5 ", "6 ", "7 ", "8 ", "9 ", "0",]

  # group_labels = ["Web", "Edit/chat", "Image", "Gimp", "Meld", "Video", "Vb", "Files", "Mail", "Music",]

  # group_layouts = ["monadtall", "monadtall", "monadtall", "monadtall", "monadtall", "monadtall", "monadtall", "monadtall", "monadtall", "monadtall",]
  # #group_layouts = ["monadtall", "matrix", "monadtall", "bsp", "monadtall", "matrix", "monadtall", "bsp", "monadtall", "monadtall",]

  # for i in range(len(group_names)):
  #     groups.append(
  #         Group(
  #             name=group_names[i],
  #             layout=group_layouts[i].lower(),
  #             label=group_labels[i],
  #         ))

  # for i in groups:
  #     keys.extend([

  # #CHANGE WORKSPACES
  #         Key([mod], i.name, lazy.group[i.name].toscreen()),
  #         Key([mod], "Tab", lazy.screen.next_group()),
  #         Key([mod, "shift" ], "Tab", lazy.screen.prev_group()),
  #         Key(["mod1"], "Tab", lazy.screen.next_group()),
  #         Key(["mod1", "shift"], "Tab", lazy.screen.prev_group()),

  # # MOVE WINDOW TO SELECTED WORKSPACE 1-10 AND STAY ON WORKSPACE
  #         #Key([mod, "shift"], i.name, lazy.window.togroup(i.name)),
  # # MOVE WINDOW TO SELECTED WORKSPACE 1-10 AND FOLLOW MOVED WINDOW TO WORKSPACE
  #         Key([mod, "shift"], i.name, lazy.window.togroup(i.name) , lazy.group[i.name].toscreen()),
  #     ])


  # def init_layout_theme():
  #     return {"margin":5,
  #             "border_width":2,
  #             "border_focus": "#5e81ac",
  #             "border_normal": "#4c566a"
  #             }

  # layout_theme = init_layout_theme()


  # layouts = [
  #     #layout.MonadTall(margin=8, border_width=2, border_focus="#5e81ac", border_normal="#4c566a"),
  #     layout.MonadTall(**layout_theme),
  #     #layout.MonadWide(margin=8, border_width=2, border_focus="#5e81ac", border_normal="#4c566a"),
  #     layout.MonadWide(**layout_theme),
  #     layout.Matrix(**layout_theme),
  #     layout.Bsp(**layout_theme),
  #     layout.Floating(**layout_theme),
  #     layout.RatioTile(**layout_theme),
  #     layout.Max(**layout_theme)
  # ]

  # # COLORS FOR THE BAR
  # #Theme name : ArcoLinux Zion
  # def init_colors():
  #     return [["#4a4a46", "#4a4a46"], # color 0
  #             ["#4a4a46", "#4a4a46"], # color 1
  #             ["#e3bbf1", "#e3bbf1"], # color 2
  #             ["#d33682", "#d33682"], # color 3
  #             ["#3384d0", "#3384d0"], # color 4
  #             ["#fdf6e3", "#fdf6e3"], # color 5
  #             ["#d42121", "#d42121"], # color 6
  #             ["#62FF00", "#62FF00"], # color 7
  #             ["#9742b5", "#9742b5"], # color 8
  #             ["#002b36", "#002b36"]] # color 9


  # colors = init_colors()

  # # WIDGETS FOR THE BAR

  # def init_widgets_defaults():
  #     return dict(font="Noto Sans",
  #                 fontsize = 12,
  #                 padding = 2,
  #                 background=colors[1])

  # widget_defaults = init_widgets_defaults()

  # def init_widgets_list():
  #     prompt = "{0}@{1}: ".format(os.environ["USER"], socket.gethostname())
  #     widgets_list = [
  #                widget.GroupBox(font="FontAwesome",
  #                         fontsize = 16,
  #                         margin_y = -1,
  #                         margin_x = 0,
  #                         padding_y = 6,
  #                         padding_x = 5,
  #                         borderwidth = 0,
  #                         disable_drag = True,
  #                         active = colors[9],
  #                         inactive = colors[5],
  #                         rounded = False,
  #                         highlight_method = "text",
  #                         this_current_screen_border = colors[8],
  #                         foreground = colors[2],
  #                         background = colors[1]
  #                         ),
  #                widget.Sep(
  #                         linewidth = 1,
  #                         padding = 10,
  #                         foreground = colors[2],
  #                         background = colors[1]
  #                         ),
  #                widget.CurrentLayout(
  #                         font = "Noto Sans Bold",
  #                         foreground = colors[5],
  #                         background = colors[1]
  #                         ),
  #                widget.Sep(
  #                         linewidth = 1,
  #                         padding = 10,
  #                         foreground = colors[2],
  #                         background = colors[1]
  #                         ),
  #                widget.WindowName(font="Noto Sans",
  #                         fontsize = 12,
  #                         foreground = colors[5],
  #                         background = colors[1],
  #                         ),
  #                # widget.Net(
  #                #          font="Noto Sans",
  #                #          fontsize=12,
  #                #          interface="enp0s31f6",
  #                #          foreground=colors[2],
  #                #          background=colors[1],
  #                #          padding = 0,
  #                #          ),
  #                # widget.Sep(
  #                #          linewidth = 1,
  #                #          padding = 10,
  #                #          foreground = colors[2],
  #                #          background = colors[1]
  #                #          ),
  #                # widget.NetGraph(
  #                #          font="Noto Sans",
  #                #          fontsize=12,
  #                #          bandwidth="down",
  #                #          interface="auto",
  #                #          fill_color = colors[8],
  #                #          foreground=colors[2],
  #                #          background=colors[1],
  #                #          graph_color = colors[8],
  #                #          border_color = colors[2],
  #                #          padding = 0,
  #                #          border_width = 1,
  #                #          line_width = 1,
  #                #          ),
  #                # widget.Sep(
  #                #          linewidth = 1,
  #                #          padding = 10,
  #                #          foreground = colors[2],
  #                #          background = colors[1]
  #                #          ),
  #                # # do not activate in Virtualbox - will break qtile
  #                # widget.ThermalSensor(
  #                #          foreground = colors[5],
  #                #          foreground_alert = colors[6],
  #                #          background = colors[1],
  #                #          metric = True,
  #                #          padding = 3,
  #                #          threshold = 80
  #                #          ),
  #                # # battery option 1  ArcoLinux Horizontal icons do not forget to import arcobattery at the top
  #                # widget.Sep(
  #                #          linewidth = 1,
  #                #          padding = 10,
  #                #          foreground = colors[2],
  #                #          background = colors[1]
  #                #          ),
  #                # arcobattery.BatteryIcon(
  #                #          padding=0,
  #                #          scale=0.7,
  #                #          y_poss=2,
  #                #          theme_path=home + "/.config/qtile/icons/battery_icons_horiz",
  #                #          update_interval = 5,
  #                #          background = colors[1]
  #                #          ),
  #                # # battery option 2  from Qtile
  #                # widget.Sep(
  #                #          linewidth = 1,
  #                #          padding = 10,
  #                #          foreground = colors[2],
  #                #          background = colors[1]
  #                #          ),
  #                # widget.Battery(
  #                #          font="Noto Sans",
  #                #          update_interval = 10,
  #                #          fontsize = 12,
  #                #          foreground = colors[5],
  #                #          background = colors[1],
  # 	           #          ),
  #                # widget.TextBox(
  #                #          font="FontAwesome",
  #                #          text="  ",
  #                #          foreground=colors[6],
  #                #          background=colors[1],
  #                #          padding = 0,
  #                #          fontsize=16
  #                #          ),
  #                # widget.CPUGraph(
  #                #          border_color = colors[2],
  #                #          fill_color = colors[8],
  #                #          graph_color = colors[8],
  #                #          background=colors[1],
  #                #          border_width = 1,
  #                #          line_width = 1,
  #                #          core = "all",
  #                #          type = "box"
  #                #          ),
  #                # widget.Sep(
  #                #          linewidth = 1,
  #                #          padding = 10,
  #                #          foreground = colors[2],
  #                #          background = colors[1]
  #                #          ),
  #                # widget.TextBox(
  #                #          font="FontAwesome",
  #                #          text="  ",
  #                #          foreground=colors[4],
  #                #          background=colors[1],
  #                #          padding = 0,
  #                #          fontsize=16
  #                #          ),
  #                # widget.Memory(
  #                #          font="Noto Sans",
  #                #          format = '{MemUsed}M/{MemTotal}M',
  #                #          update_interval = 1,
  #                #          fontsize = 12,
  #                #          foreground = colors[5],
  #                #          background = colors[1],
  #                #         ),
  #                # widget.Sep(
  #                #          linewidth = 1,
  #                #          padding = 10,
  #                #          foreground = colors[2],
  #                #          background = colors[1]
  #                #          ),
  #                widget.TextBox(
  #                         font="FontAwesome",
  #                         text="  ",
  #                         foreground=colors[3],
  #                         background=colors[1],
  #                         padding = 0,
  #                         fontsize=16
  #                         ),
  #                widget.Clock(
  #                         foreground = colors[5],
  #                         background = colors[1],
  #                         fontsize = 12,
  #                         format="%Y-%m-%d %H:%M"
  #                         ),
  #                # widget.Sep(
  #                #          linewidth = 1,
  #                #          padding = 10,
  #                #          foreground = colors[2],
  #                #          background = colors[1]
  #                #          ),
  #                widget.Systray(
  #                         background=colors[1],
  #                         icon_size=20,
  #                         padding = 4
  #                         ),
  #               ]
  #     return widgets_list

  # widgets_list = init_widgets_list()


  # def init_widgets_screen1():
  #     widgets_screen1 = init_widgets_list()
  #     return widgets_screen1

  # def init_widgets_screen2():
  #     widgets_screen2 = init_widgets_list()
  #     return widgets_screen2

  # widgets_screen1 = init_widgets_screen1()
  # widgets_screen2 = init_widgets_screen2()


  # def init_screens():
  #     return [Screen(top=bar.Bar(widgets=init_widgets_screen1(), size=26, opacity=0.8)),
  #             Screen(top=bar.Bar(widgets=init_widgets_screen2(), size=26, opacity=0.8))]
  # screens = init_screens()


  # # MOUSE CONFIGURATION
  # mouse = [
  #     Drag([mod], "Button1", lazy.window.set_position_floating(),
  #          start=lazy.window.get_position()),
  #     Drag([mod], "Button3", lazy.window.set_size_floating(),
  #          start=lazy.window.get_size())
  # ]

  # dgroups_key_binder = None
  # dgroups_app_rules = []

  # # ASSIGN APPLICATIONS TO A SPECIFIC GROUPNAME
  # # BEGIN

  # #########################################################
  # ################ assgin apps to groups ##################
  # #########################################################
  # # @hook.subscribe.client_new
  # # def assign_app_group(client):
  # #     d = {}
  # #     #####################################################################################
  # #     ### Use xprop fo find  the value of WM_CLASS(STRING) -> First field is sufficient ###
  # #     #####################################################################################
  # #     d[group_names[0]] = ["Navigator", "Firefox", "Vivaldi-stable", "Vivaldi-snapshot", "Chromium", "Google-chrome", "Brave", "Brave-browser",
  # #               "navigator", "firefox", "vivaldi-stable", "vivaldi-snapshot", "chromium", "google-chrome", "brave", "brave-browser", ]
  # #     d[group_names[1]] = [ "Atom", "Subl", "Geany", "Brackets", "Code-oss", "Code", "TelegramDesktop", "Discord",
  # #                "atom", "subl", "geany", "brackets", "code-oss", "code", "telegramDesktop", "discord", ]
  # #     d[group_names[2]] = ["Inkscape", "Nomacs", "Ristretto", "Nitrogen", "Feh",
  # #               "inkscape", "nomacs", "ristretto", "nitrogen", "feh", ]
  # #     d[group_names[3]] = ["Gimp", "gimp" ]
  # #     d[group_names[4]] = ["Meld", "meld", "org.gnome.meld" "org.gnome.Meld" ]
  # #     d[group_names[5]] = ["Vlc","vlc", "Mpv", "mpv" ]
  # #     d[group_names[6]] = ["VirtualBox Manager", "VirtualBox Machine", "Vmplayer",
  # #               "virtualbox manager", "virtualbox machine", "vmplayer", ]
  # #     d[group_names[7]] = ["Thunar", "Nemo", "Caja", "Nautilus", "org.gnome.Nautilus", "Pcmanfm", "Pcmanfm-qt",
  # #               "thunar", "nemo", "caja", "nautilus", "org.gnome.nautilus", "pcmanfm", "pcmanfm-qt", ]
  # #     d[group_names[8]] = ["Evolution", "Geary", "Mail", "Thunderbird",
  # #               "evolution", "geary", "mail", "thunderbird" ]
  # #     d[group_names[9]] = ["Spotify", "Pragha", "Clementine", "Deadbeef", "Audacious",
  # #               "spotify", "pragha", "clementine", "deadbeef", "audacious" ]
  # #     ######################################################################################
  # #
  # # wm_class = client.window.get_wm_class()[0]
  # #
  # #     for i in range(len(d)):
  # #         if wm_class in list(d.values())[i]:
  # #             group = list(d.keys())[i]
  # #             client.togroup(group)
  # #             client.group.cmd_toscreen(toggle=False)

  # # END
  # # ASSIGN APPLICATIONS TO A SPECIFIC GROUPNAME

  # main = None

  # # hides the top bar when the archlinux-logout widget is opened
  # @hook.subscribe.client_new
  # def new_client(window):
  #     if window.name == "ArchLinux Logout":
  #         qtile.hide_show_bar()

  # # shows the top bar when the archlinux-logout widget is closed
  # @hook.subscribe.client_killed
  # def logout_killed(window):
  #     if window.name == "ArchLinux Logout":
  #         qtile.hide_show_bar()

  # @hook.subscribe.startup_once
  # def start_once():
  #     home = os.path.expanduser('~')
  #     subprocess.call([home + '/.config/qtile/scripts/autostart.sh'])

  # @hook.subscribe.startup
  # def start_always():
  #     # Set the cursor to something sane in X
  #     subprocess.Popen(['xsetroot', '-cursor_name', 'left_ptr'])

  # @hook.subscribe.client_new
  # def set_floating(window):
  #     if (window.window.get_wm_transient_for()
  #             or window.window.get_wm_type() in floating_types):
  #         window.floating = True

  # floating_types = ["notification", "toolbar", "splash", "dialog"]


  # follow_mouse_focus = True
  # bring_front_click = False
  # cursor_warp = False
  # floating_layout = layout.Floating(float_rules=[
  #     # Run the utility of `xprop` to see the wm class and name of an X client.
  #     *layout.Floating.default_float_rules,
  #     Match(wm_class='confirmreset'),  # gitk
  #     Match(wm_class='makebranch'),  # gitk
  #     Match(wm_class='maketag'),  # gitk
  #     Match(wm_class='ssh-askpass'),  # ssh-askpass
  #     Match(title='branchdialog'),  # gitk
  #     Match(title='pinentry'),  # GPG key password entry
  #     Match(wm_class='Arcolinux-welcome-app.py'),
  #     Match(wm_class='Arcolinux-calamares-tool.py'),
  #     Match(wm_class='confirm'),
  #     Match(wm_class='dialog'),
  #     Match(wm_class='download'),
  #     Match(wm_class='error'),
  #     Match(wm_class='file_progress'),
  #     Match(wm_class='notification'),
  #     Match(wm_class='splash'),
  #     Match(wm_class='toolbar'),
  #     Match(wm_class='Arandr'),
  #     Match(wm_class='feh'),
  #     Match(wm_class='Galculator'),
  #     Match(wm_class='archlinux-logout'),
  #     Match(wm_class='xfce4-terminal'),

  # ],  fullscreen_border_width = 0, border_width = 0)
  # auto_fullscreen = True

  # focus_on_window_activation = "focus" # or smart

  # wmname = "LG3D"

#+end_src
